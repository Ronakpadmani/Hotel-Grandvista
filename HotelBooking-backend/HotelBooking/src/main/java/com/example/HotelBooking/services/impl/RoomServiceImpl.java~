package com.example.HotelBooking.services.impl;

import com.example.HotelBooking.dtos.Response;
import com.example.HotelBooking.dtos.RoomDTO;
import com.example.HotelBooking.entities.Room;
import com.example.HotelBooking.enums.RoomType;
import com.example.HotelBooking.exceptions.InvalidBookingStateAndDateException;
import com.example.HotelBooking.exceptions.NotFoundException;
import com.example.HotelBooking.repositories.RoomRepository;
import com.example.HotelBooking.services.RoomService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.modelmapper.ModelMapper;
import org.modelmapper.TypeToken;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

@Service
@Slf4j
@RequiredArgsConstructor
public class RoomServiceImpl implements RoomService {

    private final RoomRepository roomRepository;
    private final ModelMapper modelMapper;

   // private static final String IMAGE_DIRECTORY = System.getProperty("user.dir") + "/product-Image/";

    //image direcrtory for our fronten app
    private static final String IMAGE_DIRECTORY_FRONTEND = "F:/hotel-react-frontend/hotel-react-frontend/public/rooms";

    @Override
    public Response addRoom(RoomDTO roomDTO, MultipartFile imagefile) {
        Room roomToSave = modelMapper.map(roomDTO, Room.class);

        if(imagefile != null) {
            String imagePath = saveImageToFrontend(imagefile);
            roomToSave.setImageUrl(imagePath);

        }
        roomRepository.save(roomToSave);

        return Response.builder()
                .status(200)
                .message("Room added successfully")
                .build();
    }

    @Override
    public Response updateRoom(RoomDTO roomDTO, MultipartFile imagefile) {
        Room existingRoom = roomRepository.findById(roomDTO.getId())
                .orElseThrow(() -> new NotFoundException("Room not found"));

        if (imagefile != null && !imagefile.isEmpty()) {
            String imagePath = saveImageToFrontend(imagefile);
            existingRoom.setImageUrl(imagePath);
        }

        if (roomDTO.getRoomNumber() != null && roomDTO.getRoomNumber() >= 0) {
            existingRoom.setRoomNumber(roomDTO.getRoomNumber());
        }

        if (roomDTO.getPricepernight() != null && roomDTO.getPricepernight().compareTo(BigDecimal.ZERO) >= 0) {
            existingRoom.setPricePerNight(roomDTO.getPricepernight());
        }

        if (roomDTO.getCapacity() != null && roomDTO.getCapacity() >= 0) {
            existingRoom.setCapacity(roomDTO.getCapacity());
        }

        if (roomDTO.getType() != null) {
            existingRoom.setType(roomDTO.getType());
        }

        if (roomDTO.getDescription() != null) {
            existingRoom.setDescription(roomDTO.getDescription());
        }

        roomRepository.save(existingRoom);

        return Response.builder()
                .status(200)
                .message("Room successfully updated")
                .build();
    }

    @Override
    public Response getAllRooms() {
        List<Room> roomList = roomRepository.findAll(Sort.by(Sort.Direction.DESC, "id"));
        List<RoomDTO> roomDTOList = modelMapper.map(roomList, new TypeToken<List<RoomDTO>>(){}.getType());

        return Response.builder()
                .status(200)
                .message("Success")
                .rooms(roomDTOList)
                .build();
    }

    @Override
    public Response getRoomById(Long id) {
        Room room = roomRepository.findById(id)
                .orElseThrow(() -> new NotFoundException("Room not found"));

        RoomDTO roomDTO = modelMapper.map(room, RoomDTO.class);

        return Response.builder()
                .status(200)
                .message("Success")
                .room(roomDTO)
                .build();
    }

    @Override
    public Response deleteRoom(Long id) {
       if(!roomRepository.existsById(id)) {
           throw new NotFoundException("Room not found");
       }

       roomRepository.deleteById(id);

       return Response.builder()
               .status(200)
               .message("Room deleted successfully")
               .build();
    }

    @Override
    public Response getAvailableRooms(LocalDate checkInDate, LocalDate checkOutDate, RoomType roomType) {

        //validation : Ensure the check-in date is before today

        if(checkInDate.isBefore(LocalDate.now())) {
            throw new InvalidBookingStateAndDateException("Check-in date cannot be before today");
        }

        //validation : Ensure the check-out date is after the check-in date

        if(checkOutDate.isBefore(checkInDate)) {
            throw new InvalidBookingStateAndDateException("Check-out date cannot be before check-in date");
        }

        //validation : Ensure the check-in date is not the same as check-out date

        if (checkInDate.isEqual(checkOutDate)) {
            throw new InvalidBookingStateAndDateException("Check-in date cannot be the same as check-out date");
        }


        List<Room> roomList = roomRepository.findAvailableRooms(checkInDate, checkOutDate, roomType);

        List<RoomDTO> roomDTOList = modelMapper.map(roomList, new TypeToken<List<RoomDTO>>(){}.getType());

        return Response.builder()
                .status(200)
                .message("Success")
                .rooms(roomDTOList)
                .build();
    }

    @Override
    public List<RoomType> getAllRoomTypes() {
        return Arrays.asList(RoomType.values());
    }

    @Override
    public Response searchRooms(String input) {
        List<Room> roomList = roomRepository.searchRooms(input);

        List<RoomDTO> roomDTOList = modelMapper.map(roomList, new TypeToken<List<RoomDTO>>(){}.getType());

        return Response.builder()
                .status(200)
                .message("Success")
                .rooms(roomDTOList)
                .build();
    }



//    private String saveImage(MultipartFile imagefile) {
//        if(!imagefile.getContentType().startsWith("image/")) {
//            throw new IllegalArgumentException("Only image files are allowed");
//        }
//
//        //create directory to store image if it doesn exist
//
//        File directory = new File(IMAGE_DIRECTORY);
//
//        if(!directory.exists()) {
//            directory.mkdirs();
//        }
//
//        //Generate unique file name for the image
//        String uniqueFileName = UUID.randomUUID() + "_" + imagefile.getOriginalFilename();
//
//        //get the absolute path of the image
//
//        String imagePath = IMAGE_DIRECTORY + uniqueFileName;
//
//        try {
//
//            File destinationFile = new File(imagePath);
//            imagefile.transferTo(destinationFile);
//
//        }catch (Exception e) {
//            throw  new IllegalArgumentException(e.getMessage());
//        }
//
//        return imagePath;
//
//    }

    private String saveImageToFrontend(MultipartFile imagefile) {
        if(!imagefile.getContentType().startsWith("image/")) {
            throw new IllegalArgumentException("Only image files are allowed");
        }

        //create directory to store image if it doesn exist

        File directory = new File(IMAGE_DIRECTORY_FRONTEND);

        if(!directory.exists()) {
            directory.mkdirs();
        }

        //Generate unique file name for the image
        String uniqueFileName = UUID.randomUUID() + "_" + imagefile.getOriginalFilename();

        //get the absolute path of the image

        String imagePath = IMAGE_DIRECTORY_FRONTEND + uniqueFileName;

        try {

            File destinationFile = new File(imagePath);
            imagefile.transferTo(destinationFile);

        }catch (Exception e) {
            throw  new IllegalArgumentException(e.getMessage());
        }

        return "/rooms/" + uniqueFileName;

    }

}
