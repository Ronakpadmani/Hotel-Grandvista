# 🏨 Hotel Grand Vista - Booking System

A comprehensive hotel booking management system built with Spring Boot, featuring user authentication, room management, booking system, and payment integration with Stripe.

## 🌟 Features

### 🔐 Authentication & Authorization
- **User Registration & Login** with JWT token authentication
- **Role-based Access Control** (Admin, Customer)
- **Secure password handling** with Spring Security
- **JWT token-based session management**

### 🏠 Room Management
- **Room CRUD operations** (Create, Read, Update, Delete)
- **Room type categorization** (Single, Double, Suite, etc.)
- **Image upload support** for room photos
- **Room availability checking** with date range filtering
- **Room search functionality**
- **Price management** per room type

### 📅 Booking System
- **Create and manage bookings** with unique reference numbers
- **Booking status tracking** (Pending, Confirmed, Cancelled, Completed)
- **Date range validation** for check-in/check-out
- **Booking history** for users
- **Admin booking management**

### 💳 Payment Integration
- **Stripe payment gateway** integration
- **Secure payment processing**
- **Payment status tracking**
- **Transaction history**
- **Email notifications** for payment success/failure

### 📧 Email Notifications
- **SMTP email integration** (Gmail)
- **Booking confirmations**
- **Payment notifications**
- **Customizable email templates**

### 🔍 Advanced Features
- **File upload support** (up to 2GB)
- **Data validation** with Bean Validation
- **Exception handling** with custom error responses
- **CORS configuration** for frontend integration
- **Docker support** for easy deployment

## 🛠 Technology Stack

### Backend
- **Java 17**
- **Spring Boot 3.5.3**
- **Spring Security** with JWT
- **Spring Data JPA**
- **MySQL 8.0** Database
- **Maven** for dependency management
- **Lombok** for boilerplate code reduction

### Payment & External Services
- **Stripe API** for payment processing
- **SMTP** for email notifications
- **JWT** for authentication

## 📋 Prerequisites

Before running this application, make sure you have:

- **Java 17** or higher
- **Maven 3.6+**
- **MySQL 8.0** or higher
- **Stripe Account** (for payment processing)
- **Gmail Account** (for email notifications)

## 🚀 Quick Start

### Option 1: Local Development

1. **Clone the repository**
   ```bash
   git clone https://github.com/Ronakpadmani/Hotel-Grandvista.git
   cd Hotel-Grandvista/HotelBooking
   ```

2. **Configure database**
   - Create MySQL database named `hotel`
   - Update `src/main/resources/application.properties` with your database credentials

3. **Set up environment variables**
   ```bash
   cp env.example .env
   # Edit .env file with your actual credentials
   ```

4. **Build and run**
   ```bash
   mvn clean package -DskipTests
   java -jar target/HotelBooking-0.0.1-SNAPSHOT.jar
   ```

## 🔧 Configuration

### Environment Variables

Create a `.env` file in the `HotelBooking` directory:

```env
# Database Configuration
SPRING_DATASOURCE_URL=jdbc:mysql://localhost:3306/hotel
SPRING_DATASOURCE_USERNAME=your_username
SPRING_DATASOURCE_PASSWORD=your_password

# JWT Configuration
SECRETE_JWT_STRING=your_jwt_secret_key_here

# Mail Configuration
SPRING_MAIL_HOST=smtp.gmail.com
SPRING_MAIL_PORT=587
SPRING_MAIL_USERNAME=your_email@gmail.com
SPRING_MAIL_PASSWORD=your_email_app_password

# Stripe Configuration
STRIPE_API_PUBLIC_KEY=your_stripe_public_key
STRIPE_API_SECRET_KEY=your_stripe_secret_key
```

### Database Setup

1. Create MySQL database:
   ```sql
   CREATE DATABASE hotel;
   ```

2. The application will automatically create tables using JPA/Hibernate with `spring.jpa.hibernate.ddl-auto=update`

## 📚 API Documentation

### Authentication Endpoints

| Method | Endpoint | Description | Access |
|--------|----------|-------------|---------|
| POST | `/api/auth/register` | Register new user | Public |
| POST | `/api/auth/login` | User login | Public |

### User Management

| Method | Endpoint | Description | Access |
|--------|----------|-------------|---------|
| GET | `/api/user/all` | Get all users | Admin |
| GET | `/api/user/account` | Get own account details | Customer |
| PUT | `/api/user/update` | Update own account | Customer |
| DELETE | `/api/user/delete` | Delete own account | Customer |
| GET | `/api/user/bookings` | Get booking history | Customer |

### Room Management

| Method | Endpoint | Description | Access |
|--------|----------|-------------|---------|
| GET | `/api/room/all` | Get all rooms | Public |
| GET | `/api/room/{id}` | Get room by ID | Public |
| POST | `/api/room/add` | Add new room | Admin |
| PUT | `/api/room/update` | Update room | Admin |
| DELETE | `/api/room/delete/{id}` | Delete room | Admin |
| GET | `/api/room/available` | Get available rooms | Public |
| GET | `/api/room/types` | Get room types | Public |
| GET | `/api/room/search` | Search rooms | Public |

### Booking Management

| Method | Endpoint | Description | Access |
|--------|----------|-------------|---------|
| GET | `/api/booking/all` | Get all bookings | Admin |
| POST | `/api/booking` | Create booking | Admin/Customer |
| GET | `/api/booking/{reference}` | Get booking by reference | Public |
| PUT | `/api/booking/update` | Update booking | Admin |

### Payment Processing

| Method | Endpoint | Description | Access |
|--------|----------|-------------|---------|
| POST | `/api/payment/pay` | Create payment intent | Public |
| PUT | `/api/payment/update` | Update payment status | Public |

## 🔐 Security

### JWT Authentication
- JWT tokens are used for authentication
- Tokens expire after a configurable time
- Secure token generation and validation

### Role-Based Access Control
- **ADMIN**: Full access to all endpoints
- **CUSTOMER**: Limited access to user-specific operations

### CORS Configuration
- Configured for frontend integration
- Secure cross-origin requests

## 📧 Email Notifications

The system sends email notifications for:
- Booking confirmations
- Payment success/failure
- Account updates

### Email Configuration
- SMTP server: Gmail
- TLS encryption enabled
- Customizable email templates

## 💳 Payment Integration

### Stripe Integration
- Secure payment processing
- Payment intent creation
- Transaction status tracking
- Webhook support for payment updates

### Payment Flow
1. User creates booking
2. Payment intent created via Stripe
3. User completes payment
4. Payment status updated
5. Email notification sent

```

## 🧪 Testing

### Run Tests
```bash
# Run all tests
mvn test

# Run tests with coverage
mvn test jacoco:report

# Skip tests during build
mvn clean package -DskipTests
```

## 📁 Project Structure

```
HotelBooking/
├── src/
│   ├── main/
│   │   ├── java/com/example/HotelBooking/
│   │   │   ├── config/           # Configuration classes
│   │   │   ├── controller/       # REST controllers
│   │   │   ├── dtos/            # Data Transfer Objects
│   │   │   ├── entities/        # JPA entities
│   │   │   ├── enums/           # Enumerations
│   │   │   ├── exceptions/      # Custom exceptions
│   │   │   ├── payments/        # Payment integration
│   │   │   ├── repositories/    # Data access layer
│   │   │   ├── security/        # Security configuration
│   │   │   └── services/        # Business logic
│   │   └── resources/
│   │       └── application.properties
│   └── test/                    # Test classes
├── Dockerfile                   # Docker configuration
├── docker-compose.yml          # Docker Compose setup
├── pom.xml                     # Maven dependencies
└── README.md                   # This file
```

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/AmazingFeature`)
3. Commit your changes (`git commit -m 'Add some AmazingFeature'`)
4. Push to the branch (`git push origin feature/AmazingFeature`)
5. Open a Pull Request


## 👨‍💻 Author

**Ronak Padmani**
- GitHub: [@Ronakpadmani](https://github.com/Ronakpadmani)

## 🙏 Acknowledgments

- Spring Boot team for the excellent framework
- Stripe for payment processing
- MySQL for database management
